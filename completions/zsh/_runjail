#compdef runjail

setopt localoptions extended_glob

local -a args

(( $+functions[_runjail_file_list] )) ||
_runjail_file_list() {
  # like _dir_list but completes dirs and files

  local sep=: dosuf suf

  while [[ "$1" = -(s*|S) ]]; do
    case "$1" in
    -s)  sep="$2"; shift 2;;
    -s*) sep="${1[3,-1]}"; shift;;
    -S)  dosuf=yes; shift;;
    esac
  done

  compset -P "*${sep}"
  compset -S "${sep}*" || suf="$sep"

  if [[ -n "$dosuf" ]]; then
    suf=(-S "$suf")
  else
    suf=()
  fi

  _files "$suf[@]" -r "${sep}"' /\t\t\-' "$@"
}

args=(
  '--allow-host[Allow connecting to host through a HTTP proxy.]:host:_hosts'
  '--bind-ro[Bind mount source file/directory from parent namespace to target read-only (format: "source:target").]:mapping:_runjail_file_list'
  '--bind-ro-try[Bind mount source file/directory from parent namespace to target read-only (format: "source:target"). Ignores non-existent source.]:mapping:_runjail_file_list'
  '--bind-rw[Bind mount source file/directory from parent namespace to target read-write (format: "source:target").]:mapping:_runjail_file_list'
  '--bind-rw-try[Bind mount source file/directory from parent namespace to target read-write (format: "source:target"). Ignores non-existent source.]:mapping:_runjail_file_list'
  '--config[Fetch options from config file.]:file:_files -g "*.{yaml,yml}"'
  '--cwd[Set the current working directory.]:path:_files -/'
  '--debug[Enable debug mode.]'
  '--empty[Mount empty tmpfs on the specified directory.]:path:_files -/'
  '--env[Set the environment variable (format: "name=value")]'
  '--hide[Make file/directory inaccessible.]:path:_files'
  '--hide-try[Make file/directory inaccessible. Ignore non-existent path.]:path:_files'
  '--ipc[Allow IPC (don'\''t start an own IPC namespace)]'
  '--net[Enable/disable network access <yes|no>.]:mode:(yes no)'
  '--no-systemd-unit[Start comand in a transient systemd unit.]'
  '--profile[Enable predefined profile: <x11|wayland|flatpak>]:profile:(x11 wayland flatpak)'
  '--ro[Mount file/directory from parent namespace read-only.]:path:_files'
  '--ro-try[Mount file/directory from parent namespace read-only. Ignores non-existent source.]:path:_files'
  '--rw[Mount file/directory from parent namespace read-write.]:path:_files'
  '--rw-try[Mount file/directory from parent namespace read-write. Ignores non-existent source.]:path:_files'
  '--seccomp[Enable seccomp syscall filtering: <yes|devel|minimal|no>.]:mode:(yes devel minimal no)'
  '(-):command: _command_names -e'
  '*::arguments: _normal'
)

_arguments -S $args
